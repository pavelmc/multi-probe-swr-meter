-- ------------------------------------------------------
-- Title: PWR/SWR meter
--
-- Author: Pavel Milanes pavelmc@gmail.com, 2016
--
-- License: GNU GPL 3.0
--
-- Compiler: 2.4q2
--
-- Description:
--  Multi probe PWR/SWR meter, based 
--
--
-- ------------------------------------------------------


include 16f876                      -- target PICmicro
--
pragma target clock 14_318_180      -- oscillator frequency
--
pragma target OSC      HS           -- crystal or resonator
pragma target WDT      DISABLED     -- watchdog
pragma target DEBUG    DISABLED     -- debugging
pragma target BROWNOUT DISABLED     -- brownout reset
pragma target LVP      DISABLED     -- low voltage programming

enable_digital_io()

-- LCD setting
const byte LCD_ROWS    =  2           -- LCD with 2 lines
const byte LCD_CHARS   =  20          -- and 16 characters per line

alias     lcd_en       is pin_A5      -- data trigger
alias     lcd_rs       is pin_A4      -- command/data select.

pin_A5_direction       = output
pin_A4_direction       = output

alias     lcd_dataport is portC_low
portC_low_direction    = all_output

include lcd_hd44780_4
lcd_init()

-- alias de los botones
alias  b_mode is pin_C4
alias  b_down is pin_C5
alias  b_up   is pin_C6


--definir los caracteres nuevos
-- a 1 makes a pixel dark ; only lower 5 bits are meaningfull (5x7 + underscore)
-- se asume que simepre la barra superior será mayor o igual a la inferior
const byte u1d0[] = {
0b_00011000,
0b_00011000,
0b_00011000,
0b_00000000,
0b_00000000,
0b_00000000,
0b_00000000,
0b_00000000
}

const byte u1d1[] = {
0b_00011000,
0b_00011000,
0b_00011000,
0b_00000000,
0b_00011000,
0b_00011000,
0b_00011000,
0b_00000000
}


const byte u2d0[] = {
0b_00011011,
0b_00011011,
0b_00011011,
0b_00000000,
0b_00000000,
0b_00000000,
0b_00000000,
0b_00000000
}

const byte u2d1[] = {
0b_00011011,
0b_00011011,
0b_00011011,
0b_00000000,
0b_00011000,
0b_00011000,
0b_00011000,
0b_00000000
}

const byte u2d2[] = {
0b_00011011,
0b_00011011,
0b_00011011,
0b_00000000,
0b_00011011,
0b_00011011,
0b_00011011,
0b_00000000
}

lcd_define(1, u1d0)
lcd_define(2, u1d1)
lcd_define(3, u2d0)
lcd_define(4, u2d1)
lcd_define(5, u2d2)

-- delay
include delay

-- print
include print

-- format
include format

-- ADC
const bit ADC_HIGH_RESOLUTION = high
const byte ADC_NCHANNEL = 2
const byte ADC_NVREF = ADC_NO_EXT_VREF
include adc
adc_init()

-- setup the timer0_isr_interval library
const word timer0_isr_rate = 1000  -- 1 kHz isr rate
const DELAY_SLOTS = 2
include timer0_isr_interval
timer0_isr_init()

-- debounce
include debounce

-- internal eeprom
include pic_data_eeprom

-- variables
-- como se lee del ADC
var word ffwd           = 0     -- valor de la lectura del encendido del diodo
var word frev           = 0     -- valor de la lectura del encendido del diodo
-- ADC raw values
var word rfwd           = 0     -- voltaje fwd como se lee del ADC
var word rrev           = 0     -- voltaje rev como se lee del ADC
-- voltage real
var dword vfwd          = 0     -- voltaje real en mv
var dword vrev          = 0     -- voltaje real en mv
-- instantaneous power
var dword pfwd          = 0     -- Potencia directa en 3 decimales (100.5W = 100500)
var dword prev          = 0     -- Potencia reflejada en 3 decimales (3.25W = 3250)
-- samples for the average
const byte samples      = 10
-- arrays para rms
var dword avf[samples]
var dword avr[samples]
-- rms values
var dword rmsvf
var dword rmsvr
var dword rmsfwd
var dword rmsrev
-- pep values
var dword pepvf
var dword pepvr
var dword pepfwd
var dword peprev

-- SWR
var word swr = 0                -- valor del swr 1:2.51 ~ 2.51 ~ 251\
-- variables para la barra
var byte barra
-- max power
var dword maxpower
-- contestants
var word probe_gain = 16_550       -- it will be / 1000 ahead.
-- mode and others
var byte mode = 0               -- 0 = PEP; 1 = RMS ; 2 = SWR
-- max swr a mostrar en display
var word swr_display = 800      -- 8.00
-- numero de la sonda
var byte probe = 0
var byte probeid = 255

-- temp vars
var byte i          -- the venerable iterator

-- counter de los botones
const byte DBT = 25
var word modest = debounce_init(DBT)
var word upst = debounce_init(DBT)
var word downst = debounce_init(DBT)

-- eliminar el offset del cálculo
function fixOffset(word in value, word in offset) return word is
    -- seleccionando el offset correcto
    if value > offset then
        return value - offset
    else
        return 0
    end if
end function


-- procedimiento para calcular el valor del ADC a mV
function tomv(word in adcin) return dword is
    var dword long

    -- Calcular valor de Vreal en la carga
    long = adcin
    -- multiplicarlo por la constante de mv*unidad
    long = (long * 4888 ) / 1000
    -- ya está en mv, ahora allar el valor real
    -- con la perdida de la sonda
    long = (long * probe_gain) / 1000

    -- retornar el valor
    return long
end function


-- calcular la potencia
function topwr(dword in vin) return dword is
    -- variable realmente grande para el cálculo
    var byte*5 p
    p = vin
    p = p * vin
    p = p / 50_000
    return dword(p)
end function


-- calcular el SWR los valors de voltage son en dependencia del modo
function toswr() return word is
    var word result

    -- verificar que halla potencia
    if (vfwd < 100) then
        result = 100
    else
        var dword tlsuma
        var dword tlresta

        case mode of
        0,1:
            block
                tlsuma = pepvf + pepvr
                tlresta = pepvf - pepvr
            end block
        2:
            block
                tlsuma = vfwd + vrev
                tlresta = vfwd - vrev
            end block
    end case

        result = word((tlsuma * 100) / tlresta)
    end if

    return result
end function


procedure pushvf(dword in val) is
    pragma inline
    -- correr el valor en el array y hacer un push al final
    var dword tlong = 0
    i = 0
    pepvf = val
    tlong = val

    for (samples - 1) loop
        -- push del nuevo valor
        avf[i] = avf[i + 1]
        -- pep
        if avf[i] > pepvf then
            pepvf = avf[i]
        end if
        -- average
        tlong = tlong + avf[i]
        -- iterator
        i = i + 1
    end loop
    avf[samples - 1] = val

    -- calcular la media y el pep
    rmsvf = tlong / samples
end procedure


procedure pushvr(dword in val) is
    pragma inline
    -- correr el valor en el array y hacer un push al final
    var dword tlong = 0
    i = 0
    pepvr = val
    tlong = val

    for (samples - 1) loop
        -- push del nuevo valor
        avr[i] = avr[i + 1]
        -- pep
        if avr[i] > pepvr then
            pepvr = avr[i]
        end if
        -- average
        tlong = tlong + avr[i]
        -- iterator
        i = i + 1
    end loop
    avr[samples - 1] = val

    -- calcular la media y el pep
    rmsvr = tlong / samples
end procedure


procedure spaces(byte in c) is
    -- imprimir tantos espacios como sea posibe
    for c using i loop
        lcd = 32
    end loop
end procedure


-- procedimiento para imprimir a escala los valores
procedure print_scale(dword in value) is
    -- Es para escalar las mejor resolución según el valor enviado, mostrando algo como esto...
    --  23 mW  /  675mW  /  1.56W  /  9.75W  / 12.5W  /  50.4W  /  100 W  /  145 W
    -- Siempre se usarán solo 5 lugares para poner la potencia "01234"

    -- usamos dos variables para representar el escalado a la hora del print y un divisor
    -- estos son los valores por defecto si no es mayor que los ifs siguientes
    var byte decimales = 0
    var word divisor = 1

    if value > 990 then
        -- 0.99 W  /  1.00 W  /  5.75 W
        decimales = 2
        divisor = 10
    end if

    if value > 9900 then
        -- 9.9 W  /  12.5 W  /  50.4 W  /  99.9 W
        decimales = 1
        divisor = 100
    end if

    if value > 99900 then
        --  100 W  /  160 W
        decimales = 0
        divisor = 1000
    end if

    -- imprimir el resultado
    value = value / divisor
    format_dword_dec(lcd, value, 3, decimales)
    -- poner la unidad
    if divisor == 1 then
        -- poner " mW"
        print_string(lcd, "mW")
    else
        -- poner "W"
        if decimales == 0 then
            -- si no hay comas pongo un espacio
            print_string(lcd, " ")
        end if
        
        print_string(lcd, "W")
    end if
end procedure


procedure show_it() is
    -- update the LCD (Second Line, first is Bar)
    lcd_cursor_position(1,0)
    -- mode
    case mode of
        0:  print_string(lcd,"PEP")
        1:  print_string(lcd,"RMS")
        2:  print_string(lcd,"SWR")
    end case
    -- separator
    lcd = 32    -- " "
    -- FORWARD
    print_string(lcd, "Fwd:")
    -- separator
    lcd = 32    -- " "
    case mode of
        0:  print_scale(pepfwd)
        1:  print_scale(rmsfwd)
        2:  print_scale(pepfwd)
    end case
    -- separator
    lcd = 32    -- " "
    -- REVERSE
    print_string(lcd,"Rev:")
    -- separator
    lcd = 32    -- " "
    case mode of
        0:  print_scale(peprev)
        1:  print_scale(rmsrev)
        2:  print_scale(peprev)
    end case
    -- separator
    lcd = 32    -- " "
    -- SWR
    print_string(lcd,"SWR:")
    -- separator
    lcd = 32    -- " "
    if (swr > 999) then
        -- se pasa, mucha ROE
        print_string(lcd, "> 10")
    else
        format_word_dec(lcd, swr, 3, 2)
    end if
end procedure


procedure lcd_dual_bar(byte in up, byte in lo, byte in line) is
    pragma inline
    -- upper must always equal or bigger than lower
    var byte level = 0
    var byte u
    var byte l
    var byte temp

    -- set the LCD line
    lcd_cursor_position(line, 0)

    for LCD_CHARS loop
        -- reset de variables
        u = 0
        l = 0

        -- iterator
        level = level + 2

        -- tests UP
        temp = level - 2
        if up > temp then
            u = 1
        end if
        if up >= level then
            u = 2
        end if
        -- test down
        if lo > temp then
            l = 1
        end if
        if lo >= level then
            l = 2
        end if

        temp = u << 2
        temp = temp + l

        case temp of
            0:  lcd = 32
            4:  lcd = byte(1)     -- u1d0
            5:  lcd = byte(2)     -- u1d1
            8:  lcd = byte(3)     -- u2d0
            9:  lcd = byte(4)     -- u2d1
            10: lcd = byte(5)     -- u2d2
        end case
    end loop
end procedure


procedure show_bar() is
    pragma inline
    -- define vars
    var byte upper
    var byte lower
    var word temp

    -- calc scaled factor
    temp = word(maxpower / (LCD_CHARS * 2))

    -- calculate the upper and lower values
    case mode of
        0:  block   -- PEP
                upper = byte(pfwd/temp)
                lower = byte(prev/temp)
            end block
        1:  block   -- RMS
                upper = byte(rmsfwd/temp)
                lower = byte(rmsrev/temp)
            end block
        2: block    -- SWR
                if (swr - 100) >= swr_display then
                    lower = LCD_CHARS * 2
                else
                    -- new scale factor
                    temp = swr_display / (LCD_CHARS * 2)
                    lower = byte((swr - 100)/temp)
                end if
                -- ambas barras iguales
                upper = lower
            end block
    end case

    -- asegurar que siempre se muestre las dos barras iniciales
    if upper == 0 then
        upper = 1
    end if
    if lower == 0 then
        lower = 1
    end if

    -- show the bar
    lcd_dual_bar(upper, lower, 0)

end procedure


-- power calculations
procedure calc_power() is
    -- leer los valores del ADC
    rfwd = adc_read_high_res(0)
    rrev = adc_read_high_res(1)

    -- convertirlos a mv
    vfwd = fixOffset(rfwd, ffwd)
    vfwd = tomv(word(vfwd))
    vrev = fixOffset(rrev, frev)
    vrev = tomv(word(vrev))

    -- calcular el average
    --pushvf(vfwd) -- se almacena en rmsvf
    pushvf(vfwd)
    pushvr(vrev) -- se almacena en rmsvr

    -- calcular el power instantáneo
    pfwd = topwr(vfwd)
    prev = topwr(vrev)

    -- calcular el power RMS
    rmsfwd = topwr(rmsvf)
    rmsrev = topwr(rmsvr)

    -- calcular el power PEP
    pepfwd = topwr(pepvf)
    peprev = topwr(pepvr)

    -- calcular el SWR, usando los valores según el modo
    swr = toswr()
end procedure


-- calc the max value of the power for the probe and show it on the LCD
procedure calcmp() is
    maxpower = topwr(tomv(1023 - ffwd))

    print_string(lcd, "Max PWR: ")
    format_dword_dec(lcd, (maxpower/100), 4, 1)
    print_string(lcd, " W")
end procedure


-- mostrar el SETUP del LCD_CHARS
procedure show_setup() is
    -- en la linea 1
    lcd_cursor_position(0,0)
    print_string(lcd,"SETUP | Probe Gain: ")
    format_word_dec(lcd, probe_gain, 5, 3)
    lcd = 32    -- " "
    calcmp()
end procedure


-- salvar el valor de ajuste de la sonda
procedure save_probe_gain(byte in probe) is
    -- Formato de los datos en la eeprom
    -- Es un conjunto de esto: (4 bytes)
        -- byte: ADC read low < ID de la sonda, por defecto 255 para una sola
        -- byte: MODO de la sonda < 0:PEP, 1:RMS, 2:SWR
        -- word: probe gain max:65534 = 65.500
    data_eeprom_write(probe * 4 + 1, probeid)
    data_eeprom_write(probe * 4 + 2, mode)
    data_eeprom_write_word(probe * 4 + 3, probe_gain)
end procedure


-- cargar el valor de ajuste de la sonda
procedure load_probe_gain(byte in probe) is
    pragma inline
    -- Formato de los datos en la eeprom
    -- Es un conjunto de esto: (4 bytes)
        -- byte: ADC read low < ID de la sonda, por defecto 255 para una sola
        -- byte: MODO de la sonda < 0:PEP, 1:RMS, 2:SWR
        -- word: probe gain max:65534 = 65.500
    data_eeprom_read(probe * 4 + 1, probeid)
    data_eeprom_read(probe * 4 + 2, mode)
    data_eeprom_read_word(probe * 4 + 3, probe_gain)
end procedure

procedure init_eeprom() is
    pragma inline
    var byte i = 0
    data_eeprom_read(0, i)
    if i != 24 then
        -- no inicializada, inicializar
        save_probe_gain(0)
        data_eeprom_write(0, 24)
        -- LCD activity
        spaces(10)
        print_string(lcd, "INITIALIZING EEPROM")
        spaces(11)
    else
        -- inicializada, cargar
        load_probe_gain(0)
        -- LCD activity
        spaces(14)
        print_string(lcd, "LOAD EEPROM")
        spaces(15)
    end if
end procedure


-- pep array reset
procedure pep_array_reset() is
    pragma inline
    for samples using i loop
        avf[i] = 0
        avr[i] = 0
    end loop
end procedure

--------------------------------------------------------------------------------
-- --- generate LCD screen activity ---------
lcd_clear_screen()
lcd_cursor_position(0,0)
spaces(5)
print_string(lcd, "CO7WT SWR/PWR for HF ver 1.0")
spaces(7)
lcd_cursor_position(1,0)

-- cargar los datos de la eeprom si es necesario
init_eeprom()

-- delay de la muestra
delay_100ms(15)

-- reset de los arrays para que no de power al inicio
pep_array_reset()

-- leer los valores de caida del diodo
ffwd = adc_read_high_res(0)
frev = adc_read_high_res(1)

-- show max power
lcd_cursor_position(1,0)
spaces(12)
calcmp()
spaces(12)

delay_100ms(25)
lcd_clear_screen()

-- SETUP modes
if b_mode == 0 then
    -- SETUP CAPTURE LOOP
    mode = 1    -- force RMS values
    while 1 == 1 loop
        -- buttons check
        i = debounce_fast(b_up, upst)
        if (i == 2) then
            -- incremento
            if probe_gain < 65500 then
                probe_gain = probe_gain + 50
                save_probe_gain(probe)
            end if
        end if

        i = debounce_fast(b_down, downst)
        if (i == 2) then
            -- incremento
            if probe_gain > 1000 then
                probe_gain = probe_gain - 50
                save_probe_gain(probe)
            end if
        end if

        -- power calcs
        calc_power()

        -- Display update, 4 veces por segundo
        if (check_delay(0)) then
            set_delay(0, 250)      -- 1 Khz tics, aka 4/s
            show_it()
            -- show SETUP
            show_setup()
        end if
    end loop
end if


-- forever loop
forever loop
    -- Display update, 4 veces por segundo
    if (check_delay(0)) then
        set_delay(0, 250)      -- 1 Khz tics, aka 4/s
        show_it()
    end if

    -- Lectura de valores, 5 veces por segundo
    -- hay que tomar en cunat ael tiempo de sampling del ADC
    if (check_delay(1)) then
        set_delay(1, 100)

        -- power calculations
        calc_power()

        -- show the power barra
        show_bar()
    end if

    -- botones
    if (debounce(b_mode, modest) == 2) then
        -- cambio de modo
        if mode == 2 then
            mode = 0
        else
            mode = mode + 1
        end if
    end if

end loop
